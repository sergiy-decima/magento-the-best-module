name: Coverage Test Integration
run-name: PHPUnit Integration Testing

on:
  push:
  workflow_dispatch:
  pull_request:
    paths-ignore:
      - '**.md'

jobs:
  build:
    name: Build & Run Tests
    runs-on: ubuntu-latest
    env:
      EXTENSION_PATH: extensions/Decima_TheBestModule
      MAGENTO_ROOT: /app
      MAGENTO_DIR: magento
      EXTENSIONS_DIR: extensions
      DC_IMAGE_PHP_CLI_TAG: 8.2-cli-1.3.5
    steps:
      - name: Git Checkout Deployment Tool
        uses: actions/checkout@v3
        with:
          repository: sergiy-decima/magento-local-deployment
          token: ${{ secrets.REPO_GITHUB_TOKEN }}

      - name: Prepare Magento Application
        run: |
          make prepare

      - name: Git Checkout Application
        uses: actions/checkout@v3
        with:
          repository: sergiy-decima/magento-sample-project
          token: ${{ secrets.REPO_GITHUB_TOKEN }}
          path: magento

      - name: Git Checkout Module
        uses: actions/checkout@v3
        with:
          path: ${{ env.EXTENSION_PATH }}

      - name: Copy DB
        run: |
          cp ${{ env.EXTENSION_PATH }}/.github/dumps/test.dump.sql.gz mysql/dump-for-demo
          cp ${{ env.EXTENSION_PATH }}/.github/dumps/test.dump.sql.gz mysql/dump-for-test

#      - name: Get Composer Cache Directory
#        id: composer-cache
#        run: echo "dir=~/.composer/cache" >> $GITHUB_OUTPUT
#
#      - name: Create Composer Cache
#        id: cache-composer
#        uses: actions/cache@v3
#        with:
#          path: ${{ steps.composer-cache.outputs.dir }}
#          key: ${{ runner.os }}-composer-${{ hashFiles('**/magento/composer.lock') }}
#          restore-keys: ${{ runner.os }}-composer-

#      - name: Import Environment
#        id: import-env
#        shell: bash
#        run: |
#          while read line; do
#            [[ ${line:0:1} != "#" ]] && echo "$line" >> $GITHUB_ENV
#          done < .env

      - name: Init Composer Private Repositories
        run: |
          cat magento/composer.json
          docker run --rm -e "MAGENTO_ROOT=${{ env.MAGENTO_ROOT }}" -v ${{ env.MAGENTO_DIR }}:${{ env.MAGENTO_ROOT }} -v ${{ env.EXTENSIONS_DIR }}:/${{ env.EXTENSIONS_DIR }} magento/magento-cloud-docker-php:${{ env.DC_IMAGE_PHP_CLI_TAG }} ls -la
#          docker run --rm -e "MAGENTO_ROOT=${{ env.MAGENTO_ROOT }}" -v ${{ env.MAGENTO_DIR }}:${{ env.MAGENTO_ROOT }} -v ${{ env.EXTENSIONS_DIR }}:/${{ env.EXTENSIONS_DIR }} magento/magento-cloud-docker-php:${{ env.DC_IMAGE_PHP_CLI_TAG }} composer config repositories.sergiy-decima/magento-core-module vcs https://github.com/sergiy-decima/magento-core-module

      - name: Retrieve Composer Name and Version of Module
        id: extension-info
        working-directory: ${{ env.EXTENSION_PATH }}
        run: |
          EXTENSION_NAME=`cat magento/composer.json | grep "name" | awk '{print $NF}' | head -1 | sed 's/[\",]//g'`
          echo "name=$EXTENSION_NAME" >> $GITHUB_OUTPUT
          EXTENSION_VERSION=`cat magento/composer.json | grep "version" | awk '{print $NF}' | head -1 | sed 's/[\",]//g'`
          echo "version=$EXTENSION_VERSION" >> $GITHUB_OUTPUT

      - name: Composer Require Module
        run: |
          make extensions
          docker run --rm -e "MAGENTO_ROOT=${{ env.MAGENTO_ROOT }}" -v ${{ env.MAGENTO_DIR }}:${{ env.MAGENTO_ROOT }} -v ${{ env.EXTENSIONS_DIR }}:/${{ env.EXTENSIONS_DIR }} magento/magento-cloud-docker-php:${{ env.DC_IMAGE_PHP_CLI_TAG }} bash -c "composer require ${{ steps.extension-info.outputs.name }}:${{ steps.extension-info.outputs.version }} --ansi --no-interaction --prefer-dist --no-suggest --no-update"
#          docker run --rm -e "MAGENTO_ROOT=${{ env.MAGENTO_ROOT }}" -v ${{ env.MAGENTO_DIR }}:${{ env.MAGENTO_ROOT }} -v ${{ env.EXTENSIONS_DIR }}:/${{ env.EXTENSIONS_DIR }} -v ~/.composer/cache:/composer/cache magento/magento-cloud-docker-php:${{ env.DC_IMAGE_PHP_CLI_TAG }} composer require ${{ steps.extension-info.outputs.name }}:${{ steps.extension-info.outputs.version }} --ansi --no-interaction --prefer-dist --no-suggest --no-update
#          cat magento/composer.json

#      - name: Build Magento Application
#        env:
#          AUTH_JSON: ${{ secrets.AUTH_JSON }}
#        run: |
#          echo "$AUTH_JSON" > magento/auth.json
#          make env composer-json composer-auth mysql-config mage-work-dir composer-install mage-install flush-all up
#
#      - name: List Magento Application
#        if: always()
#        run: |
#          make status








#      - name: Install Composer Dependencies
#        env:
#          AUTH_JSON: ${{ secrets.AUTH_JSON }}
#        run: |
#          echo "$AUTH_JSON" > auth.json
#          composer install --no-progress --no-interaction --prefer-dist --optimize-autoloader --no-suggest
#

#

#
#      - name: Init Composer Local Repository
#        run: |
#          composer config repositories.${{ steps.extension-info.outputs.name }} path ${{ env.EXTENSION_PATH }}
#

#
#      - name: Build Magento
#        run: |
#          ./bin/magento module:enable --all
#          ./bin/magento setup:di:compile
#
#      - name: Execute Tests
#        run: vendor/bin/phpunit -c phpunit.xml.dist ${{ env.EXTENSION_PATH }} --coverage-html=${{ env.EXTENSION_PATH }}/output/html --coverage-clover=${{ env.EXTENSION_PATH }}/output/clover-coverage.xml
#
#      - name: Upload Coverage XML
#        uses: actions/upload-artifact@v3
#        with:
#          name: coverage-xml
#          path: ${{ env.EXTENSION_PATH }}/output/clover-coverage.xml
#
#      - name: Upload Coverage HTML
#        uses: actions/upload-artifact@v3
#        with:
#          name: coverage-html
#          path: ${{ env.EXTENSION_PATH }}/output/html
#
#  coverage:
#    needs: build
#    name: Check Coverage Summary
#    runs-on: ubuntu-latest
#    steps:
#      - name: Download Coverage XML
#        uses: actions/download-artifact@v3
#        with:
#          name: coverage-xml
#
#      - name: Coverage Summary Report
#        id: clover_coverage
#        uses: sergiy-decima/clover-coverage-action@1.0.0
#        with:
#          filename: clover-coverage.xml
#          thresholds: '60-80'
#          fail_if_low: true
