name: Magento Coverage Test Integration
run-name: Magento PHPUnit Integration Testing

on:
  push:
  workflow_dispatch:
  pull_request:
    paths-ignore:
      - '**.md'

env:
  MYSQL_ROOT_PASSWORD: root
  MYSQL_USER: magento
  MYSQL_PASSWORD: magento
  MYSQL_DATABASE: magento
  AMQP_USER: guest
  AMQP_PASSWORD: guest
jobs:
  build:
    name: Build & Run Tests
    runs-on: ubuntu-latest
    env:
      EXTENSIONS_DIR: extensions
      EXTENSION_PATH: extensions/Decima_TheBestModule
      MAGENTO_DIR: magento
      MAGENTO_ROOT: /app
#    container:
#      image: magento/magento-cloud-docker-php:8.2-cli-1.3.5
#      env:
#        MAGENTO_ROOT: ${{ env.MAGENTO_ROOT }}
#        MAGENTO_RUN_MODE: developer
#        PHP_EXTENSIONS: bcmath bz2 calendar exif gd gettext intl mysqli pcntl pdo_mysql soap sockets sysvmsg sysvsem sysvshm opcache zip xsl sodium xdebug
#        XDEBUG_MODE: coverage
#        SENDMAIL_PATH: /usr/local/bin/mhsendmail --smtp-addr=mailhog:1025
##      working_dir: /app
#      volumes:
#        - magento:/app:delegated
#        - extensions:/extensions:delegated
    services:
      db:
        image: mariadb:10.4
        ports:
          - 3307:3306
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_USER: magento
          MYSQL_PASSWORD: magento
          MYSQL_DATABASE: magento
        options: --name db --health-cmd="mysqladmin ping -h localhost -pmagento" --health-interval=5s --health-timeout=2s --health-retries=3

      opensearch:
        image: magento/magento-cloud-docker-opensearch:2.4-1.3.5
        ports:
          - 9200:9200
        env:
          cluster.name: docker-cluster
          discovery.type: single-node
          discovery.seed_hosts: opensearch
          bootstrap.memory_lock: true
          DISABLE_SECURITY_PLUGIN: true
        options: --name opensearch

      rabbitmq:
        image: rabbitmq:3.11
        ports:
          - 5672:5672
        options: --name rabbitmq

      redis:
        image: redis:6.2
        ports:
          - 6379:6379
        options: --name redis --health-cmd="redis-cli ping || exit 1" --health-interval=5s --health-timeout=2s --health-retries=3

    steps:
      - name: Install Environment
        run: |
          sudo apt-get install -y mysql-client libmysqlclient-dev

      - name: Git Checkout Application
        uses: actions/checkout@v3
        with:
          repository: sergiy-decima/magento-sample-project
          token: ${{ secrets.REPO_GITHUB_TOKEN }}
          ref: develop

      - name: Git Checkout Module
        uses: actions/checkout@v3
        with:
          path: ${{ env.EXTENSION_PATH }}

#      - name: Copy Test Configuration
#        run: |
#          mkdir -p ${{ env.MAGENTO_DIR }}/dev/tests/integration/etc/
##          cp phpunit/etc/config-global.php.dist ${{ env.MAGENTO_DIR }}/dev/tests/integration/etc/config-global.php
##          cp phpunit/etc/install-config-mysql.php.dist ${{ env.MAGENTO_DIR }}/dev/tests/integration/etc/install-config-mysql.php
##          cp phpunit/phpunit.xml.dist ${{ env.MAGENTO_DIR }}/phpunit.xml.dist
##          cat ${{ env.MAGENTO_DIR }}/phpunit.xml.dist

      - name: Import Data to Database
        run: |
          gunzip < ${{ env.EXTENSION_PATH }}/Test/Integration/dump/test.dump.sql.gz | docker exec -i db mysql -hlocalhost -u${{ env.MYSQL_USER }} -p${{ env.MYSQL_PASSWORD }} ${{ env.MYSQL_DATABASE }}
#          docker exec -i db mysql -hlocalhost -u${{ env.MYSQL_USER }} -p${{ env.MYSQL_PASSWORD }} ${{ env.MYSQL_DATABASE }} -e "SHOW TABLES"
#          docker ps
#          mysql --host localhost --port ${{ job.services.mysql.ports[3306] }} -umagento -pmagento -e "SHOW DATABASES"


      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          tools: phpunit-bridge
          extensions: mbstring, xml, ctype, iconv, json, mcrypt, zip, simplexml, bcmath, intl, dom
          coverage: xdebug

#
#      - name: Prepare Magento DataBase
#        run: |
#          cp ${{ env.EXTENSION_PATH }}/.github/autotest/etc/* ${{ env.MAGENTO_DIR }}/dev/tests/integration/etc/
#          cp ${{ env.EXTENSION_PATH }}/.github/autotest/phpunit.xml ${{ env.MAGENTO_DIR }}/dev/tests/integration/
#          cp ${{ env.EXTENSION_PATH }}/.github/autotest/test.dump.sql.gz mysql/dump-to-import
#          cp ${{ env.EXTENSION_PATH }}/.github/autotest/test.dump.sql.gz phpunit/dump-to-import
#          cat ${{ env.MAGENTO_DIR }}/dev/tests/integration/phpunit.xml
#          ls -la phpunit/dump
#
#      - name: Prepare Composer Extensions
#        run: make extensions

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Create Composer Cache
        id: cache-composer
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Init Composer Private Repositories
        run: |
          composer config repositories.sergiy-decima/magento-core-module vcs https://github.com/sergiy-decima/magento-core-module

      - name: Composer Install
        env:
          AUTH_JSON: ${{ secrets.AUTH_JSON }}
        run: |
          echo "$AUTH_JSON" > auth.json
          composer install --ansi --no-interaction --prefer-dist

      - name: Retrieve Composer Name and Version of Module
        id: extension-info
        working-directory: ${{ env.EXTENSION_PATH }}
        run: |
          EXTENSION_NAME=`cat composer.json | grep "name" | awk '{print $NF}' | head -1 | sed 's/[\",]//g'`
          echo "name=$EXTENSION_NAME" >> $GITHUB_OUTPUT
          EXTENSION_VERSION=`cat composer.json | grep "version" | awk '{print $NF}' | head -1 | sed 's/[\",]//g'`
          echo "version=$EXTENSION_VERSION" >> $GITHUB_OUTPUT

      - name: Local Require Module
        run: |
          composer config repositories.dev-extensions path ${{ env.EXTENSIONS_DIR }}/*
          composer require ${{ steps.extension-info.outputs.name }}:${{ steps.extension-info.outputs.version }} --ansi --no-interaction --prefer-dist

      - name: Show Container Statuses
        run: docker ps

      - name: Build Magento Application
        run: |
          bin/magento setup:config:set \
            --db-host=127.0.0.1:${{ job.services.db.ports[3306] }} \
            --db-name=${{ env.MYSQL_DATABASE }} \
            --db-user=${{ env.MYSQL_USER }} \
            --db-password=${{ env.MYSQL_PASSWORD }} \
            --session-save=redis \
            --session-save-redis-host=localhost \
            --session-save-redis-port=${{ job.services.redis.ports[6379] }} \
            --session-save-redis-db=0 \
            --cache-backend=redis \
            --cache-backend-redis-server=localhost \
            --cache-backend-redis-port=${{ job.services.redis.ports[6379] }} \
            --cache-backend-redis-db=1 \
            --page-cache=redis \
            --page-cache-redis-server=localhost \
            --page-cache-redis-port=${{ job.services.redis.ports[6379] }} \
            --page-cache-redis-db=2 \
            --page-cache-redis-compress-data=0
          bin/magento setup:install \
            --db-host=127.0.0.1:${{ job.services.db.ports[3306] }} \
            --db-name=${{ env.MYSQL_DATABASE }} \
            --db-user=${{ env.MYSQL_USER }} \
            --db-password=${{ env.MYSQL_PASSWORD }} \
            --use-secure=0 \
            --use-secure-admin=1 \
            --base-url=http://magento2.test/ \
            --base-url-secure=https://magento2.test/ \
            --admin-user=admin \
            --admin-password=123123q \
            --admin-firstname=Adriano \
            --admin-lastname=Celentano \
            --admin-email=admin@gmail.com \
            --backend-frontname=admin \
            --language=en_US \
            --currency=USD \
            --timezone=America/Los_Angeles \
            --use-rewrites=1 \
            --search-engine=opensearch \
            --opensearch-host=localhost \
            --opensearch-port=${{ job.services.opensearch.ports[9200] }} \
            --magento-init-params="MAGE_MODE=developer" \
            --disable-modules=Magento_AdminAdobeImsTwoFactorAuth,Magento_TwoFactorAuth \
            --amqp-host=localhost \
            --amqp-port=${{ job.services.rabbitmq.ports[5672] }} \
            --amqp-user=${{ env.AMQP_USER }} \
            --amqp-password=${{ env.AMQP_PASSWORD }} \
            --amqp-virtualhost=/

      - name: Execute Tests
        env:
          INPUT_DB_HOST: 127.0.0.1:${{ job.services.db.ports[3306] }}
          INPUT_DB_USER: ${{ env.MYSQL_USER }}
          INPUT_DB_PASSWORD: ${{ env.MYSQL_PASSWORD }}
          INPUT_DB_NAME: ${{ env.MYSQL_DATABASE }}
          INPUT_OPENSEARCH_HOST: localhost
          INPUT_OPENSEARCH_PORT: ${{ job.services.opensearch.ports[9200] }}
          INPUT_AMQP_HOST: localhost
          INPUT_AMQP_PORT: ${{ job.services.rabbitmq.ports[5672] }}
          INPUT_AMQP_USER: ${{ env.AMQP_USER }}
          INPUT_AMQP_PASSWORD: ${{ env.AMQP_PASSWORD }}
        run: |
          sudo cp ${{ env.EXTENSION_PATH }}/Test/Integration/etc/* dev/tests/integration/etc/
          sudo cp ${{ env.EXTENSION_PATH }}/Test/Integration/phpunit.xml dev/tests/integration/phpunit.xml
          vendor/bin/phpunit -vvv -c dev/tests/integration/phpunit.xml ${{ env.EXTENSION_PATH }} \
            --coverage-html=../../../reports/html \
            --coverage-clover=../../../reports/clover.coverage.xml \
            --coverage-text=../../../reports/coverage.txt
#          vendor/bin/phpunit -vvv -c dev/tests/integration/phpunit.xml \
#            --testsuite Magento_Tests_Extensions \
#            --coverage-html=../../../reports/html \
#            --coverage-clover=../../../reports/clover.coverage.xml \
#            --coverage-text=../../../reports/coverage.txt
          test -f reports/coverage.txt && cat reports/coverage.txt
#          docker compose run --rm -e XDEBUG_MODE=coverage fpm_xdebug bash -c "vendor/bin/phpunit -c dev/tests/integration/phpunit.xml --testsuite Magento_Tests_Extensions"
#          RUN_COMMAND="vendor/bin/phpunit -c phpunit.xml.dist -vvv --testsuite \"Magento_Tests_Extensions\" --coverage-html=../../../reports/html --coverage-clover=../../../reports/clover.coverage.xml --coverage-text=../../../reports/coverage.txt"







#      - name: Install Composer Dependencies
#        env:
#          AUTH_JSON: ${{ secrets.AUTH_JSON }}
#        run: |
#          echo "$AUTH_JSON" > auth.json
#          composer install --no-progress --no-interaction --prefer-dist --optimize-autoloader --no-suggest
#

#

#
#      - name: Init Composer Local Repository
#        run: |
#          composer config repositories.${{ steps.extension-info.outputs.name }} path ${{ env.EXTENSION_PATH }}
#

#
#      - name: Build Magento
#        run: |
#          ./bin/magento module:enable --all
#          ./bin/magento setup:di:compile
#
#      - name: Execute Tests
#        run: vendor/bin/phpunit -c phpunit.xml.dist ${{ env.EXTENSION_PATH }} --coverage-html=${{ env.EXTENSION_PATH }}/output/html --coverage-clover=${{ env.EXTENSION_PATH }}/output/clover-coverage.xml
#
#      - name: Upload Coverage XML
#        uses: actions/upload-artifact@v3
#        with:
#          name: coverage-xml
#          path: ${{ env.EXTENSION_PATH }}/output/clover-coverage.xml
#
#      - name: Upload Coverage HTML
#        uses: actions/upload-artifact@v3
#        with:
#          name: coverage-html
#          path: ${{ env.EXTENSION_PATH }}/output/html
#
#  coverage:
#    needs: build
#    name: Check Coverage Summary
#    runs-on: ubuntu-latest
#    steps:
#      - name: Download Coverage XML
#        uses: actions/download-artifact@v3
#        with:
#          name: coverage-xml
#
#      - name: Coverage Summary Report
#        id: clover_coverage
#        uses: sergiy-decima/clover-coverage-action@1.0.0
#        with:
#          filename: clover-coverage.xml
#          thresholds: '60-80'
#          fail_if_low: true
